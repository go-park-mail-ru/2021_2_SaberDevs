// Code generated by MockGen. DO NOT EDIT.
// Source: articles.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_2_SaberDevs/internal/article/models"
	gomock "github.com/golang/mock/gomock"
)

// MockArticleUsecase is a mock of ArticleUsecase interface.
type MockArticleUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockArticleUsecaseMockRecorder
}

// MockArticleUsecaseMockRecorder is the mock recorder for MockArticleUsecase.
type MockArticleUsecaseMockRecorder struct {
	mock *MockArticleUsecase
}

// NewMockArticleUsecase creates a new mock instance.
func NewMockArticleUsecase(ctrl *gomock.Controller) *MockArticleUsecase {
	mock := &MockArticleUsecase{ctrl: ctrl}
	mock.recorder = &MockArticleUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleUsecase) EXPECT() *MockArticleUsecaseMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockArticleUsecase) Delete(ctx context.Context, c, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, c, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockArticleUsecaseMockRecorder) Delete(ctx, c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockArticleUsecase)(nil).Delete), ctx, c, id)
}

// Fetch mocks base method.
func (m *MockArticleUsecase) Fetch(ctx context.Context, c, idLastLoaded string, chunkSize int) ([]models.Preview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, c, idLastLoaded, chunkSize)
	ret0, _ := ret[0].([]models.Preview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockArticleUsecaseMockRecorder) Fetch(ctx, c, idLastLoaded, chunkSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockArticleUsecase)(nil).Fetch), ctx, c, idLastLoaded, chunkSize)
}

// FindArticles mocks base method.
func (m *MockArticleUsecase) FindArticles(ctx context.Context, c, query, idLastLoaded string, chunkSize int) ([]models.Preview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindArticles", ctx, c, query, idLastLoaded, chunkSize)
	ret0, _ := ret[0].([]models.Preview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindArticles indicates an expected call of FindArticles.
func (mr *MockArticleUsecaseMockRecorder) FindArticles(ctx, c, query, idLastLoaded, chunkSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindArticles", reflect.TypeOf((*MockArticleUsecase)(nil).FindArticles), ctx, c, query, idLastLoaded, chunkSize)
}

// FindAuthors mocks base method.
func (m *MockArticleUsecase) FindAuthors(ctx context.Context, query, idLastLoaded string, chunkSize int) ([]models.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAuthors", ctx, query, idLastLoaded, chunkSize)
	ret0, _ := ret[0].([]models.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAuthors indicates an expected call of FindAuthors.
func (mr *MockArticleUsecaseMockRecorder) FindAuthors(ctx, query, idLastLoaded, chunkSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAuthors", reflect.TypeOf((*MockArticleUsecase)(nil).FindAuthors), ctx, query, idLastLoaded, chunkSize)
}

// FindByTag mocks base method.
func (m *MockArticleUsecase) FindByTag(ctx context.Context, c, query, idLastLoaded string, chunkSize int) ([]models.Preview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTag", ctx, c, query, idLastLoaded, chunkSize)
	ret0, _ := ret[0].([]models.Preview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTag indicates an expected call of FindByTag.
func (mr *MockArticleUsecaseMockRecorder) FindByTag(ctx, c, query, idLastLoaded, chunkSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTag", reflect.TypeOf((*MockArticleUsecase)(nil).FindByTag), ctx, c, query, idLastLoaded, chunkSize)
}

// GetByAuthor mocks base method.
func (m *MockArticleUsecase) GetByAuthor(ctx context.Context, c, author, idLastLoaded string, chunkSize int) ([]models.Preview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAuthor", ctx, c, author, idLastLoaded, chunkSize)
	ret0, _ := ret[0].([]models.Preview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAuthor indicates an expected call of GetByAuthor.
func (mr *MockArticleUsecaseMockRecorder) GetByAuthor(ctx, c, author, idLastLoaded, chunkSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAuthor", reflect.TypeOf((*MockArticleUsecase)(nil).GetByAuthor), ctx, c, author, idLastLoaded, chunkSize)
}

// GetByCategory mocks base method.
func (m *MockArticleUsecase) GetByCategory(ctx context.Context, c, category, idLastLoaded string, chunkSize int) ([]models.Preview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCategory", ctx, c, category, idLastLoaded, chunkSize)
	ret0, _ := ret[0].([]models.Preview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCategory indicates an expected call of GetByCategory.
func (mr *MockArticleUsecaseMockRecorder) GetByCategory(ctx, c, category, idLastLoaded, chunkSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCategory", reflect.TypeOf((*MockArticleUsecase)(nil).GetByCategory), ctx, c, category, idLastLoaded, chunkSize)
}

// GetByID mocks base method.
func (m *MockArticleUsecase) GetByID(ctx context.Context, c string, id int64) (models.FullArticle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, c, id)
	ret0, _ := ret[0].(models.FullArticle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockArticleUsecaseMockRecorder) GetByID(ctx, c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockArticleUsecase)(nil).GetByID), ctx, c, id)
}

// GetByTag mocks base method.
func (m *MockArticleUsecase) GetByTag(ctx context.Context, c, tag, idLastLoaded string, chunkSize int) ([]models.Preview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTag", ctx, c, tag, idLastLoaded, chunkSize)
	ret0, _ := ret[0].([]models.Preview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTag indicates an expected call of GetByTag.
func (mr *MockArticleUsecaseMockRecorder) GetByTag(ctx, c, tag, idLastLoaded, chunkSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTag", reflect.TypeOf((*MockArticleUsecase)(nil).GetByTag), ctx, c, tag, idLastLoaded, chunkSize)
}

// Store mocks base method.
func (m *MockArticleUsecase) Store(ctx context.Context, c string, a *models.ArticleCreate) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, c, a)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockArticleUsecaseMockRecorder) Store(ctx, c, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockArticleUsecase)(nil).Store), ctx, c, a)
}

// Update mocks base method.
func (m *MockArticleUsecase) Update(ctx context.Context, c string, a *models.ArticleUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, c, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockArticleUsecaseMockRecorder) Update(ctx, c, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockArticleUsecase)(nil).Update), ctx, c, a)
}

// MockArticleRepository is a mock of ArticleRepository interface.
type MockArticleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockArticleRepositoryMockRecorder
}

// MockArticleRepositoryMockRecorder is the mock recorder for MockArticleRepository.
type MockArticleRepositoryMockRecorder struct {
	mock *MockArticleRepository
}

// NewMockArticleRepository creates a new mock instance.
func NewMockArticleRepository(ctrl *gomock.Controller) *MockArticleRepository {
	mock := &MockArticleRepository{ctrl: ctrl}
	mock.recorder = &MockArticleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleRepository) EXPECT() *MockArticleRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockArticleRepository) Delete(ctx context.Context, author string, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, author, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockArticleRepositoryMockRecorder) Delete(ctx, author, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockArticleRepository)(nil).Delete), ctx, author, id)
}

// Fetch mocks base method.
func (m *MockArticleRepository) Fetch(ctx context.Context, login string, from, chunkSize int) ([]models.Preview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, login, from, chunkSize)
	ret0, _ := ret[0].([]models.Preview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockArticleRepositoryMockRecorder) Fetch(ctx, login, from, chunkSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockArticleRepository)(nil).Fetch), ctx, login, from, chunkSize)
}

// FindArticles mocks base method.
func (m *MockArticleRepository) FindArticles(ctx context.Context, login, query string, from, chunkSize int) ([]models.Preview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindArticles", ctx, login, query, from, chunkSize)
	ret0, _ := ret[0].([]models.Preview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindArticles indicates an expected call of FindArticles.
func (mr *MockArticleRepositoryMockRecorder) FindArticles(ctx, login, query, from, chunkSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindArticles", reflect.TypeOf((*MockArticleRepository)(nil).FindArticles), ctx, login, query, from, chunkSize)
}

// FindAuthors mocks base method.
func (m *MockArticleRepository) FindAuthors(ctx context.Context, query string, from, chunkSize int) ([]models.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAuthors", ctx, query, from, chunkSize)
	ret0, _ := ret[0].([]models.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAuthors indicates an expected call of FindAuthors.
func (mr *MockArticleRepositoryMockRecorder) FindAuthors(ctx, query, from, chunkSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAuthors", reflect.TypeOf((*MockArticleRepository)(nil).FindAuthors), ctx, query, from, chunkSize)
}

// FindByTag mocks base method.
func (m *MockArticleRepository) FindByTag(ctx context.Context, login, query string, from, chunkSize int) ([]models.Preview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTag", ctx, login, query, from, chunkSize)
	ret0, _ := ret[0].([]models.Preview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTag indicates an expected call of FindByTag.
func (mr *MockArticleRepositoryMockRecorder) FindByTag(ctx, login, query, from, chunkSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTag", reflect.TypeOf((*MockArticleRepository)(nil).FindByTag), ctx, login, query, from, chunkSize)
}

// GetByAuthor mocks base method.
func (m *MockArticleRepository) GetByAuthor(ctx context.Context, login, author string, from, chunkSize int) ([]models.Preview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAuthor", ctx, login, author, from, chunkSize)
	ret0, _ := ret[0].([]models.Preview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAuthor indicates an expected call of GetByAuthor.
func (mr *MockArticleRepositoryMockRecorder) GetByAuthor(ctx, login, author, from, chunkSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAuthor", reflect.TypeOf((*MockArticleRepository)(nil).GetByAuthor), ctx, login, author, from, chunkSize)
}

// GetByCategory mocks base method.
func (m *MockArticleRepository) GetByCategory(ctx context.Context, login, category string, from, chunkSize int) ([]models.Preview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCategory", ctx, login, category, from, chunkSize)
	ret0, _ := ret[0].([]models.Preview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCategory indicates an expected call of GetByCategory.
func (mr *MockArticleRepositoryMockRecorder) GetByCategory(ctx, login, category, from, chunkSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCategory", reflect.TypeOf((*MockArticleRepository)(nil).GetByCategory), ctx, login, category, from, chunkSize)
}

// GetByID mocks base method.
func (m *MockArticleRepository) GetByID(ctx context.Context, login string, id int64) (models.FullArticle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, login, id)
	ret0, _ := ret[0].(models.FullArticle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockArticleRepositoryMockRecorder) GetByID(ctx, login, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockArticleRepository)(nil).GetByID), ctx, login, id)
}

// GetByTag mocks base method.
func (m *MockArticleRepository) GetByTag(ctx context.Context, login, tag string, from, chunkSize int) ([]models.Preview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTag", ctx, login, tag, from, chunkSize)
	ret0, _ := ret[0].([]models.Preview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTag indicates an expected call of GetByTag.
func (mr *MockArticleRepositoryMockRecorder) GetByTag(ctx, login, tag, from, chunkSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTag", reflect.TypeOf((*MockArticleRepository)(nil).GetByTag), ctx, login, tag, from, chunkSize)
}

// Store mocks base method.
func (m *MockArticleRepository) Store(ctx context.Context, a *models.Article) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, a)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockArticleRepositoryMockRecorder) Store(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockArticleRepository)(nil).Store), ctx, a)
}

// Update mocks base method.
func (m *MockArticleRepository) Update(ctx context.Context, a *models.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockArticleRepositoryMockRecorder) Update(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockArticleRepository)(nil).Update), ctx, a)
}
