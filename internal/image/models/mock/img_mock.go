// Code generated by MockGen. DO NOT EDIT.
// Source: image.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	image "image"
	multipart "mime/multipart"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_2_SaberDevs/internal/image/models"
	gomock "github.com/golang/mock/gomock"
)

// MockImageUsecase is a mock of ImageUsecase interface.
type MockImageUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockImageUsecaseMockRecorder
}

// MockImageUsecaseMockRecorder is the mock recorder for MockImageUsecase.
type MockImageUsecaseMockRecorder struct {
	mock *MockImageUsecase
}

// NewMockImageUsecase creates a new mock instance.
func NewMockImageUsecase(ctrl *gomock.Controller) *MockImageUsecase {
	mock := &MockImageUsecase{ctrl: ctrl}
	mock.recorder = &MockImageUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageUsecase) EXPECT() *MockImageUsecaseMockRecorder {
	return m.recorder
}

// GetImage mocks base method.
func (m *MockImageUsecase) GetImage(ctx context.Context, imageName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", ctx, imageName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockImageUsecaseMockRecorder) GetImage(ctx, imageName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockImageUsecase)(nil).GetImage), ctx, imageName)
}

// SaveImage mocks base method.
func (m *MockImageUsecase) SaveImage(ctx context.Context, file *multipart.FileHeader) (models.SaveImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveImage", ctx, file)
	ret0, _ := ret[0].(models.SaveImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveImage indicates an expected call of SaveImage.
func (mr *MockImageUsecaseMockRecorder) SaveImage(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveImage", reflect.TypeOf((*MockImageUsecase)(nil).SaveImage), ctx, file)
}

// MockImageRepository is a mock of ImageRepository interface.
type MockImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepositoryMockRecorder
}

// MockImageRepositoryMockRecorder is the mock recorder for MockImageRepository.
type MockImageRepositoryMockRecorder struct {
	mock *MockImageRepository
}

// NewMockImageRepository creates a new mock instance.
func NewMockImageRepository(ctrl *gomock.Controller) *MockImageRepository {
	mock := &MockImageRepository{ctrl: ctrl}
	mock.recorder = &MockImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepository) EXPECT() *MockImageRepositoryMockRecorder {
	return m.recorder
}

// GetImageByName mocks base method.
func (m *MockImageRepository) GetImageByName(ctx context.Context, imageName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageByName", ctx, imageName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageByName indicates an expected call of GetImageByName.
func (mr *MockImageRepositoryMockRecorder) GetImageByName(ctx, imageName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageByName", reflect.TypeOf((*MockImageRepository)(nil).GetImageByName), ctx, imageName)
}

// SaveImage mocks base method.
func (m *MockImageRepository) SaveImage(ctx context.Context, src *image.Image) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveImage", ctx, src)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveImage indicates an expected call of SaveImage.
func (mr *MockImageRepositoryMockRecorder) SaveImage(ctx, src interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveImage", reflect.TypeOf((*MockImageRepository)(nil).SaveImage), ctx, src)
}
