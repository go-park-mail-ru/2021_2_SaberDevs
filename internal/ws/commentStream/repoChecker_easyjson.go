// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package commentStream

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson39949963DecodeGithubComGoParkMailRu20212SaberDevsInternalWsCommentStream(in *jlexer.Lexer, out *sqlPreparedComment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = int64(in.Int64())
		case "text":
			out.Text = string(in.String())
		case "articleId":
			out.ArticleId = int64(in.Int64())
		case "articleName":
			out.ArticleName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson39949963EncodeGithubComGoParkMailRu20212SaberDevsInternalWsCommentStream(out *jwriter.Writer, in sqlPreparedComment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"articleId\":"
		out.RawString(prefix)
		out.Int64(int64(in.ArticleId))
	}
	{
		const prefix string = ",\"articleName\":"
		out.RawString(prefix)
		out.String(string(in.ArticleName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sqlPreparedComment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson39949963EncodeGithubComGoParkMailRu20212SaberDevsInternalWsCommentStream(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sqlPreparedComment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson39949963EncodeGithubComGoParkMailRu20212SaberDevsInternalWsCommentStream(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sqlPreparedComment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson39949963DecodeGithubComGoParkMailRu20212SaberDevsInternalWsCommentStream(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sqlPreparedComment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson39949963DecodeGithubComGoParkMailRu20212SaberDevsInternalWsCommentStream(l, v)
}
func easyjson39949963DecodeGithubComGoParkMailRu20212SaberDevsInternalWsCommentStream1(in *jlexer.Lexer, out *author) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "lastName":
			out.Surname = string(in.String())
		case "firstName":
			out.Name = string(in.String())
		case "avatarUrl":
			out.AvatarURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson39949963EncodeGithubComGoParkMailRu20212SaberDevsInternalWsCommentStream1(out *jwriter.Writer, in author) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"lastName\":"
		out.RawString(prefix)
		out.String(string(in.Surname))
	}
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"avatarUrl\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v author) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson39949963EncodeGithubComGoParkMailRu20212SaberDevsInternalWsCommentStream1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v author) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson39949963EncodeGithubComGoParkMailRu20212SaberDevsInternalWsCommentStream1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *author) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson39949963DecodeGithubComGoParkMailRu20212SaberDevsInternalWsCommentStream1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *author) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson39949963DecodeGithubComGoParkMailRu20212SaberDevsInternalWsCommentStream1(l, v)
}
