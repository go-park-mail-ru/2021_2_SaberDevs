// Code generated by MockGen. DO NOT EDIT.
// Source: user.pb.go

// Package mock_user_server is a generated GoMock package.
package mock_user_server

import (
	context "context"
	reflect "reflect"

	user_server "github.com/go-park-mail-ru/2021_2_SaberDevs/internal/user/user_app"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserDeliveryClient is a mock of UserDeliveryClient interface.
type MockUserDeliveryClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserDeliveryClientMockRecorder
}

// MockUserDeliveryClientMockRecorder is the mock recorder for MockUserDeliveryClient.
type MockUserDeliveryClientMockRecorder struct {
	mock *MockUserDeliveryClient
}

// NewMockUserDeliveryClient creates a new mock instance.
func NewMockUserDeliveryClient(ctrl *gomock.Controller) *MockUserDeliveryClient {
	mock := &MockUserDeliveryClient{ctrl: ctrl}
	mock.recorder = &MockUserDeliveryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDeliveryClient) EXPECT() *MockUserDeliveryClientMockRecorder {
	return m.recorder
}

// GetAuthorProfile mocks base method.
func (m *MockUserDeliveryClient) GetAuthorProfile(ctx context.Context, in *user_server.Author, opts ...grpc.CallOption) (*user_server.GetUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorProfile", varargs...)
	ret0, _ := ret[0].(*user_server.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorProfile indicates an expected call of GetAuthorProfile.
func (mr *MockUserDeliveryClientMockRecorder) GetAuthorProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorProfile", reflect.TypeOf((*MockUserDeliveryClient)(nil).GetAuthorProfile), varargs...)
}

// GetUserProfile mocks base method.
func (m *MockUserDeliveryClient) GetUserProfile(ctx context.Context, in *user_server.SessionID, opts ...grpc.CallOption) (*user_server.GetUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserProfile", varargs...)
	ret0, _ := ret[0].(*user_server.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockUserDeliveryClientMockRecorder) GetUserProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockUserDeliveryClient)(nil).GetUserProfile), varargs...)
}

// LoginUser mocks base method.
func (m *MockUserDeliveryClient) LoginUser(ctx context.Context, in *user_server.User, opts ...grpc.CallOption) (*user_server.LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginUser", varargs...)
	ret0, _ := ret[0].(*user_server.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUserDeliveryClientMockRecorder) LoginUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUserDeliveryClient)(nil).LoginUser), varargs...)
}

// Logout mocks base method.
func (m *MockUserDeliveryClient) Logout(ctx context.Context, in *user_server.CookieValue, opts ...grpc.CallOption) (*user_server.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Logout", varargs...)
	ret0, _ := ret[0].(*user_server.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockUserDeliveryClientMockRecorder) Logout(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUserDeliveryClient)(nil).Logout), varargs...)
}

// Signup mocks base method.
func (m *MockUserDeliveryClient) Signup(ctx context.Context, in *user_server.User, opts ...grpc.CallOption) (*user_server.SignupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Signup", varargs...)
	ret0, _ := ret[0].(*user_server.SignupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signup indicates an expected call of Signup.
func (mr *MockUserDeliveryClientMockRecorder) Signup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockUserDeliveryClient)(nil).Signup), varargs...)
}

// UpdateProfile mocks base method.
func (m *MockUserDeliveryClient) UpdateProfile(ctx context.Context, in *user_server.UpdateInput, opts ...grpc.CallOption) (*user_server.LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProfile", varargs...)
	ret0, _ := ret[0].(*user_server.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserDeliveryClientMockRecorder) UpdateProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserDeliveryClient)(nil).UpdateProfile), varargs...)
}

// MockUserDeliveryServer is a mock of UserDeliveryServer interface.
type MockUserDeliveryServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserDeliveryServerMockRecorder
}

// MockUserDeliveryServerMockRecorder is the mock recorder for MockUserDeliveryServer.
type MockUserDeliveryServerMockRecorder struct {
	mock *MockUserDeliveryServer
}

// NewMockUserDeliveryServer creates a new mock instance.
func NewMockUserDeliveryServer(ctrl *gomock.Controller) *MockUserDeliveryServer {
	mock := &MockUserDeliveryServer{ctrl: ctrl}
	mock.recorder = &MockUserDeliveryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDeliveryServer) EXPECT() *MockUserDeliveryServerMockRecorder {
	return m.recorder
}

// GetAuthorProfile mocks base method.
func (m *MockUserDeliveryServer) GetAuthorProfile(arg0 context.Context, arg1 *user_server.Author) (*user_server.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorProfile", arg0, arg1)
	ret0, _ := ret[0].(*user_server.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorProfile indicates an expected call of GetAuthorProfile.
func (mr *MockUserDeliveryServerMockRecorder) GetAuthorProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorProfile", reflect.TypeOf((*MockUserDeliveryServer)(nil).GetAuthorProfile), arg0, arg1)
}

// GetUserProfile mocks base method.
func (m *MockUserDeliveryServer) GetUserProfile(arg0 context.Context, arg1 *user_server.SessionID) (*user_server.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", arg0, arg1)
	ret0, _ := ret[0].(*user_server.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockUserDeliveryServerMockRecorder) GetUserProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockUserDeliveryServer)(nil).GetUserProfile), arg0, arg1)
}

// LoginUser mocks base method.
func (m *MockUserDeliveryServer) LoginUser(arg0 context.Context, arg1 *user_server.User) (*user_server.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", arg0, arg1)
	ret0, _ := ret[0].(*user_server.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUserDeliveryServerMockRecorder) LoginUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUserDeliveryServer)(nil).LoginUser), arg0, arg1)
}

// Logout mocks base method.
func (m *MockUserDeliveryServer) Logout(arg0 context.Context, arg1 *user_server.CookieValue) (*user_server.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0, arg1)
	ret0, _ := ret[0].(*user_server.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockUserDeliveryServerMockRecorder) Logout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUserDeliveryServer)(nil).Logout), arg0, arg1)
}

// Signup mocks base method.
func (m *MockUserDeliveryServer) Signup(arg0 context.Context, arg1 *user_server.User) (*user_server.SignupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", arg0, arg1)
	ret0, _ := ret[0].(*user_server.SignupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signup indicates an expected call of Signup.
func (mr *MockUserDeliveryServerMockRecorder) Signup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockUserDeliveryServer)(nil).Signup), arg0, arg1)
}

// UpdateProfile mocks base method.
func (m *MockUserDeliveryServer) UpdateProfile(arg0 context.Context, arg1 *user_server.UpdateInput) (*user_server.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1)
	ret0, _ := ret[0].(*user_server.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserDeliveryServerMockRecorder) UpdateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserDeliveryServer)(nil).UpdateProfile), arg0, arg1)
}
