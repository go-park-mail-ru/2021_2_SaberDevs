// Code generated by MockGen. DO NOT EDIT.
// Source: likesModels.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_2_SaberDevs/internal/likes/models"
	gomock "github.com/golang/mock/gomock"
)

// MockLikesUsecase is a mock of LikesUsecase interface.
type MockLikesUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLikesUsecaseMockRecorder
}

// MockLikesUsecaseMockRecorder is the mock recorder for MockLikesUsecase.
type MockLikesUsecaseMockRecorder struct {
	mock *MockLikesUsecase
}

// NewMockLikesUsecase creates a new mock instance.
func NewMockLikesUsecase(ctrl *gomock.Controller) *MockLikesUsecase {
	mock := &MockLikesUsecase{ctrl: ctrl}
	mock.recorder = &MockLikesUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLikesUsecase) EXPECT() *MockLikesUsecaseMockRecorder {
	return m.recorder
}

// Rating mocks base method.
func (m *MockLikesUsecase) Rating(ctx context.Context, a *models.LikeData, cValue string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rating", ctx, a, cValue)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rating indicates an expected call of Rating.
func (mr *MockLikesUsecaseMockRecorder) Rating(ctx, a, cValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rating", reflect.TypeOf((*MockLikesUsecase)(nil).Rating), ctx, a, cValue)
}

// MockLikesRepository is a mock of LikesRepository interface.
type MockLikesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLikesRepositoryMockRecorder
}

// MockLikesRepositoryMockRecorder is the mock recorder for MockLikesRepository.
type MockLikesRepositoryMockRecorder struct {
	mock *MockLikesRepository
}

// NewMockLikesRepository creates a new mock instance.
func NewMockLikesRepository(ctrl *gomock.Controller) *MockLikesRepository {
	mock := &MockLikesRepository{ctrl: ctrl}
	mock.recorder = &MockLikesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLikesRepository) EXPECT() *MockLikesRepositoryMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockLikesRepository) Cancel(ctx context.Context, a *models.LikeDb) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, a)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel.
func (mr *MockLikesRepositoryMockRecorder) Cancel(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockLikesRepository)(nil).Cancel), ctx, a)
}

// Dislike mocks base method.
func (m *MockLikesRepository) Dislike(ctx context.Context, a *models.LikeDb) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dislike", ctx, a)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dislike indicates an expected call of Dislike.
func (mr *MockLikesRepositoryMockRecorder) Dislike(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dislike", reflect.TypeOf((*MockLikesRepository)(nil).Dislike), ctx, a)
}

// Like mocks base method.
func (m *MockLikesRepository) Like(ctx context.Context, a *models.LikeDb) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Like", ctx, a)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Like indicates an expected call of Like.
func (mr *MockLikesRepositoryMockRecorder) Like(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Like", reflect.TypeOf((*MockLikesRepository)(nil).Like), ctx, a)
}
