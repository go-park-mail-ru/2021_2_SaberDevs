// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE9abebc9DecodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = uint(in.Uint())
		case "data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		case "msg":
			out.Msg = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Status))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels(l, v)
}
func easyjsonE9abebc9DecodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels1(in *jlexer.Lexer, out *PreparedComment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "dateTime":
			out.DateTime = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "articleId":
			out.ArticleId = int64(in.Int64())
		case "parentId":
			out.ParentId = int64(in.Int64())
		case "isEdited":
			out.IsEdited = bool(in.Bool())
		case "likes":
			out.Likes = int(in.Int())
		case "author":
			(out.Author).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels1(out *jwriter.Writer, in PreparedComment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"dateTime\":"
		out.RawString(prefix)
		out.String(string(in.DateTime))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"articleId\":"
		out.RawString(prefix)
		out.Int64(int64(in.ArticleId))
	}
	{
		const prefix string = ",\"parentId\":"
		out.RawString(prefix)
		out.Int64(int64(in.ParentId))
	}
	{
		const prefix string = ",\"isEdited\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsEdited))
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		out.Int(int(in.Likes))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		(in.Author).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PreparedComment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PreparedComment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PreparedComment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PreparedComment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels1(l, v)
}
func easyjsonE9abebc9DecodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels2(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "dateTime":
			out.DateTime = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "authorLogin":
			out.AuthorLogin = string(in.String())
		case "articleId":
			out.ArticleId = int64(in.Int64())
		case "parentId":
			out.ParentId = int64(in.Int64())
		case "isEdited":
			out.IsEdited = bool(in.Bool())
		case "likes":
			out.Likes = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels2(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"dateTime\":"
		out.RawString(prefix)
		out.String(string(in.DateTime))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"authorLogin\":"
		out.RawString(prefix)
		out.String(string(in.AuthorLogin))
	}
	{
		const prefix string = ",\"articleId\":"
		out.RawString(prefix)
		out.Int64(int64(in.ArticleId))
	}
	{
		const prefix string = ",\"parentId\":"
		out.RawString(prefix)
		out.Int64(int64(in.ParentId))
	}
	{
		const prefix string = ",\"isEdited\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsEdited))
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		out.Int(int(in.Likes))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels2(l, v)
}
func easyjsonE9abebc9DecodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels3(in *jlexer.Lexer, out *Author) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "lastName":
			out.Surname = string(in.String())
		case "firstName":
			out.Name = string(in.String())
		case "score":
			out.Score = int(in.Int())
		case "avatarUrl":
			out.AvatarURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels3(out *jwriter.Writer, in Author) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"lastName\":"
		out.RawString(prefix)
		out.String(string(in.Surname))
	}
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Int(int(in.Score))
	}
	{
		const prefix string = ",\"avatarUrl\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Author) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Author) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Author) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Author) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20212SaberDevsInternalCommentModels3(l, v)
}
