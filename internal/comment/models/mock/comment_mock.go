// Code generated by MockGen. DO NOT EDIT.
// Source: comment.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_2_SaberDevs/internal/comment/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCommentUsecase is a mock of CommentUsecase interface.
type MockCommentUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCommentUsecaseMockRecorder
}

// MockCommentUsecaseMockRecorder is the mock recorder for MockCommentUsecase.
type MockCommentUsecaseMockRecorder struct {
	mock *MockCommentUsecase
}

// NewMockCommentUsecase creates a new mock instance.
func NewMockCommentUsecase(ctrl *gomock.Controller) *MockCommentUsecase {
	mock := &MockCommentUsecase{ctrl: ctrl}
	mock.recorder = &MockCommentUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentUsecase) EXPECT() *MockCommentUsecaseMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentUsecase) CreateComment(ctx context.Context, comment *models.Comment, sessionID string) (models.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, comment, sessionID)
	ret0, _ := ret[0].(models.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentUsecaseMockRecorder) CreateComment(ctx, comment, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentUsecase)(nil).CreateComment), ctx, comment, sessionID)
}

// GetCommentsByArticleID mocks base method.
func (m *MockCommentUsecase) GetCommentsByArticleID(ctx context.Context, articleID int64) (models.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByArticleID", ctx, articleID)
	ret0, _ := ret[0].(models.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByArticleID indicates an expected call of GetCommentsByArticleID.
func (mr *MockCommentUsecaseMockRecorder) GetCommentsByArticleID(ctx, articleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByArticleID", reflect.TypeOf((*MockCommentUsecase)(nil).GetCommentsByArticleID), ctx, articleID)
}

// UpdateComment mocks base method.
func (m *MockCommentUsecase) UpdateComment(ctx context.Context, comment *models.Comment, sessionID string) (models.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, comment, sessionID)
	ret0, _ := ret[0].(models.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentUsecaseMockRecorder) UpdateComment(ctx, comment, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentUsecase)(nil).UpdateComment), ctx, comment, sessionID)
}

// MockCommentRepository is a mock of CommentRepository interface.
type MockCommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepositoryMockRecorder
}

// MockCommentRepositoryMockRecorder is the mock recorder for MockCommentRepository.
type MockCommentRepositoryMockRecorder struct {
	mock *MockCommentRepository
}

// NewMockCommentRepository creates a new mock instance.
func NewMockCommentRepository(ctrl *gomock.Controller) *MockCommentRepository {
	mock := &MockCommentRepository{ctrl: ctrl}
	mock.recorder = &MockCommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepository) EXPECT() *MockCommentRepositoryMockRecorder {
	return m.recorder
}

// GetCommentByID mocks base method.
func (m *MockCommentRepository) GetCommentByID(ctx context.Context, commentID int64) (models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentByID", ctx, commentID)
	ret0, _ := ret[0].(models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentByID indicates an expected call of GetCommentByID.
func (mr *MockCommentRepositoryMockRecorder) GetCommentByID(ctx, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentByID", reflect.TypeOf((*MockCommentRepository)(nil).GetCommentByID), ctx, commentID)
}

// GetCommentsByArticleID mocks base method.
func (m *MockCommentRepository) GetCommentsByArticleID(ctx context.Context, articleID, lastCommentID int64) ([]models.PreparedComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByArticleID", ctx, articleID, lastCommentID)
	ret0, _ := ret[0].([]models.PreparedComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByArticleID indicates an expected call of GetCommentsByArticleID.
func (mr *MockCommentRepositoryMockRecorder) GetCommentsByArticleID(ctx, articleID, lastCommentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByArticleID", reflect.TypeOf((*MockCommentRepository)(nil).GetCommentsByArticleID), ctx, articleID, lastCommentID)
}

// GetCommentsStream mocks base method.
func (m *MockCommentRepository) GetCommentsStream(lastCommentID int64) ([]models.StreamComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsStream", lastCommentID)
	ret0, _ := ret[0].([]models.StreamComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsStream indicates an expected call of GetCommentsStream.
func (mr *MockCommentRepositoryMockRecorder) GetCommentsStream(lastCommentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsStream", reflect.TypeOf((*MockCommentRepository)(nil).GetCommentsStream), lastCommentID)
}

// StoreComment mocks base method.
func (m *MockCommentRepository) StoreComment(ctx context.Context, comment *models.Comment) (models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreComment", ctx, comment)
	ret0, _ := ret[0].(models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreComment indicates an expected call of StoreComment.
func (mr *MockCommentRepositoryMockRecorder) StoreComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreComment", reflect.TypeOf((*MockCommentRepository)(nil).StoreComment), ctx, comment)
}

// UpdateComment mocks base method.
func (m *MockCommentRepository) UpdateComment(ctx context.Context, comment *models.Comment) (models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, comment)
	ret0, _ := ret[0].(models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentRepositoryMockRecorder) UpdateComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentRepository)(nil).UpdateComment), ctx, comment)
}
