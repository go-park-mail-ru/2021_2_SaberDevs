// Code generated by protoc-gen-go. DO NOT EDIT.
// source: comment.proto

package comment_server

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Comment struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DateTime             string   `protobuf:"bytes,2,opt,name=dateTime,proto3" json:"dateTime,omitempty"`
	Text                 string   `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	AuthorLogin          string   `protobuf:"bytes,4,opt,name=authorLogin,proto3" json:"authorLogin,omitempty"`
	ArticleId            int64    `protobuf:"varint,5,opt,name=articleId,proto3" json:"articleId,omitempty"`
	ParentId             int64    `protobuf:"varint,6,opt,name=parentId,proto3" json:"parentId,omitempty"`
	IsEdited             bool     `protobuf:"varint,7,opt,name=isEdited,proto3" json:"isEdited,omitempty"`
	Likes                int32    `protobuf:"varint,8,opt,name=likes,proto3" json:"likes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Comment) Reset()         { *m = Comment{} }
func (m *Comment) String() string { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()    {}
func (*Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{0}
}

func (m *Comment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Comment.Unmarshal(m, b)
}
func (m *Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Comment.Marshal(b, m, deterministic)
}
func (m *Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment.Merge(m, src)
}
func (m *Comment) XXX_Size() int {
	return xxx_messageInfo_Comment.Size(m)
}
func (m *Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment proto.InternalMessageInfo

func (m *Comment) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Comment) GetDateTime() string {
	if m != nil {
		return m.DateTime
	}
	return ""
}

func (m *Comment) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Comment) GetAuthorLogin() string {
	if m != nil {
		return m.AuthorLogin
	}
	return ""
}

func (m *Comment) GetArticleId() int64 {
	if m != nil {
		return m.ArticleId
	}
	return 0
}

func (m *Comment) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *Comment) GetIsEdited() bool {
	if m != nil {
		return m.IsEdited
	}
	return false
}

func (m *Comment) GetLikes() int32 {
	if m != nil {
		return m.Likes
	}
	return 0
}

type Author struct {
	Login                string   `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	LastName             string   `protobuf:"bytes,2,opt,name=lastName,proto3" json:"lastName,omitempty"`
	FirstName            string   `protobuf:"bytes,3,opt,name=firstName,proto3" json:"firstName,omitempty"`
	Score                int32    `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	AvatarUrl            string   `protobuf:"bytes,5,opt,name=avatarUrl,proto3" json:"avatarUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Author) Reset()         { *m = Author{} }
func (m *Author) String() string { return proto.CompactTextString(m) }
func (*Author) ProtoMessage()    {}
func (*Author) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{1}
}

func (m *Author) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Author.Unmarshal(m, b)
}
func (m *Author) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Author.Marshal(b, m, deterministic)
}
func (m *Author) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Author.Merge(m, src)
}
func (m *Author) XXX_Size() int {
	return xxx_messageInfo_Author.Size(m)
}
func (m *Author) XXX_DiscardUnknown() {
	xxx_messageInfo_Author.DiscardUnknown(m)
}

var xxx_messageInfo_Author proto.InternalMessageInfo

func (m *Author) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *Author) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Author) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Author) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Author) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

type PreparedComment struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DateTime             string   `protobuf:"bytes,2,opt,name=dateTime,proto3" json:"dateTime,omitempty"`
	Text                 string   `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	ArticleId            int64    `protobuf:"varint,4,opt,name=articleId,proto3" json:"articleId,omitempty"`
	ParentId             int64    `protobuf:"varint,5,opt,name=parentId,proto3" json:"parentId,omitempty"`
	IsEdited             bool     `protobuf:"varint,6,opt,name=isEdited,proto3" json:"isEdited,omitempty"`
	Author               *Author  `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	Likes                int32    `protobuf:"varint,8,opt,name=likes,proto3" json:"likes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreparedComment) Reset()         { *m = PreparedComment{} }
func (m *PreparedComment) String() string { return proto.CompactTextString(m) }
func (*PreparedComment) ProtoMessage()    {}
func (*PreparedComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{2}
}

func (m *PreparedComment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreparedComment.Unmarshal(m, b)
}
func (m *PreparedComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreparedComment.Marshal(b, m, deterministic)
}
func (m *PreparedComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreparedComment.Merge(m, src)
}
func (m *PreparedComment) XXX_Size() int {
	return xxx_messageInfo_PreparedComment.Size(m)
}
func (m *PreparedComment) XXX_DiscardUnknown() {
	xxx_messageInfo_PreparedComment.DiscardUnknown(m)
}

var xxx_messageInfo_PreparedComment proto.InternalMessageInfo

func (m *PreparedComment) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PreparedComment) GetDateTime() string {
	if m != nil {
		return m.DateTime
	}
	return ""
}

func (m *PreparedComment) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *PreparedComment) GetArticleId() int64 {
	if m != nil {
		return m.ArticleId
	}
	return 0
}

func (m *PreparedComment) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *PreparedComment) GetIsEdited() bool {
	if m != nil {
		return m.IsEdited
	}
	return false
}

func (m *PreparedComment) GetAuthor() *Author {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *PreparedComment) GetLikes() int32 {
	if m != nil {
		return m.Likes
	}
	return 0
}

type CommentResponse struct {
	Status               uint32           `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Data                 *PreparedComment `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Msg                  string           `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CommentResponse) Reset()         { *m = CommentResponse{} }
func (m *CommentResponse) String() string { return proto.CompactTextString(m) }
func (*CommentResponse) ProtoMessage()    {}
func (*CommentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{3}
}

func (m *CommentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentResponse.Unmarshal(m, b)
}
func (m *CommentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentResponse.Marshal(b, m, deterministic)
}
func (m *CommentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentResponse.Merge(m, src)
}
func (m *CommentResponse) XXX_Size() int {
	return xxx_messageInfo_CommentResponse.Size(m)
}
func (m *CommentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommentResponse proto.InternalMessageInfo

func (m *CommentResponse) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CommentResponse) GetData() *PreparedComment {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CommentResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type CommentChunkResponse struct {
	Status               uint32             `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Data                 []*PreparedComment `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	Msg                  string             `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CommentChunkResponse) Reset()         { *m = CommentChunkResponse{} }
func (m *CommentChunkResponse) String() string { return proto.CompactTextString(m) }
func (*CommentChunkResponse) ProtoMessage()    {}
func (*CommentChunkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{4}
}

func (m *CommentChunkResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentChunkResponse.Unmarshal(m, b)
}
func (m *CommentChunkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentChunkResponse.Marshal(b, m, deterministic)
}
func (m *CommentChunkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentChunkResponse.Merge(m, src)
}
func (m *CommentChunkResponse) XXX_Size() int {
	return xxx_messageInfo_CommentChunkResponse.Size(m)
}
func (m *CommentChunkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentChunkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommentChunkResponse proto.InternalMessageInfo

func (m *CommentChunkResponse) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CommentChunkResponse) GetData() []*PreparedComment {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CommentChunkResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type CreateCommentInput struct {
	Comment              *Comment `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
	SessionID            string   `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateCommentInput) Reset()         { *m = CreateCommentInput{} }
func (m *CreateCommentInput) String() string { return proto.CompactTextString(m) }
func (*CreateCommentInput) ProtoMessage()    {}
func (*CreateCommentInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{5}
}

func (m *CreateCommentInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCommentInput.Unmarshal(m, b)
}
func (m *CreateCommentInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCommentInput.Marshal(b, m, deterministic)
}
func (m *CreateCommentInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCommentInput.Merge(m, src)
}
func (m *CreateCommentInput) XXX_Size() int {
	return xxx_messageInfo_CreateCommentInput.Size(m)
}
func (m *CreateCommentInput) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCommentInput.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCommentInput proto.InternalMessageInfo

func (m *CreateCommentInput) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *CreateCommentInput) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type UpdateCommentInput struct {
	Comment              *Comment `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
	SessionID            string   `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateCommentInput) Reset()         { *m = UpdateCommentInput{} }
func (m *UpdateCommentInput) String() string { return proto.CompactTextString(m) }
func (*UpdateCommentInput) ProtoMessage()    {}
func (*UpdateCommentInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{6}
}

func (m *UpdateCommentInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCommentInput.Unmarshal(m, b)
}
func (m *UpdateCommentInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCommentInput.Marshal(b, m, deterministic)
}
func (m *UpdateCommentInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCommentInput.Merge(m, src)
}
func (m *UpdateCommentInput) XXX_Size() int {
	return xxx_messageInfo_UpdateCommentInput.Size(m)
}
func (m *UpdateCommentInput) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCommentInput.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCommentInput proto.InternalMessageInfo

func (m *UpdateCommentInput) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *UpdateCommentInput) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type ArticleID struct {
	ArticleID            int64    `protobuf:"varint,1,opt,name=articleID,proto3" json:"articleID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArticleID) Reset()         { *m = ArticleID{} }
func (m *ArticleID) String() string { return proto.CompactTextString(m) }
func (*ArticleID) ProtoMessage()    {}
func (*ArticleID) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{7}
}

func (m *ArticleID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArticleID.Unmarshal(m, b)
}
func (m *ArticleID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArticleID.Marshal(b, m, deterministic)
}
func (m *ArticleID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleID.Merge(m, src)
}
func (m *ArticleID) XXX_Size() int {
	return xxx_messageInfo_ArticleID.Size(m)
}
func (m *ArticleID) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleID.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleID proto.InternalMessageInfo

func (m *ArticleID) GetArticleID() int64 {
	if m != nil {
		return m.ArticleID
	}
	return 0
}

func init() {
	proto.RegisterType((*Comment)(nil), "comment_server.Comment")
	proto.RegisterType((*Author)(nil), "comment_server.Author")
	proto.RegisterType((*PreparedComment)(nil), "comment_server.PreparedComment")
	proto.RegisterType((*CommentResponse)(nil), "comment_server.CommentResponse")
	proto.RegisterType((*CommentChunkResponse)(nil), "comment_server.CommentChunkResponse")
	proto.RegisterType((*CreateCommentInput)(nil), "comment_server.CreateCommentInput")
	proto.RegisterType((*UpdateCommentInput)(nil), "comment_server.UpdateCommentInput")
	proto.RegisterType((*ArticleID)(nil), "comment_server.ArticleID")
}

func init() { proto.RegisterFile("comment.proto", fileDescriptor_749aee09ea917828) }

var fileDescriptor_749aee09ea917828 = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xd1, 0x8a, 0xd3, 0x40,
	0x14, 0xdd, 0xb4, 0x4d, 0xda, 0xde, 0xd2, 0x5d, 0x19, 0x96, 0x1a, 0x8b, 0xb0, 0x21, 0xf8, 0x50,
	0x5f, 0x0a, 0x76, 0xbf, 0x60, 0x6d, 0x45, 0x0a, 0x22, 0x32, 0xb8, 0xbe, 0xf8, 0x20, 0x63, 0xe7,
	0xba, 0x3b, 0x6c, 0x9a, 0x84, 0x99, 0x49, 0x71, 0xff, 0xc1, 0x6f, 0xf0, 0xb7, 0xfc, 0x0a, 0xff,
	0x41, 0x66, 0x32, 0x6d, 0x36, 0x0d, 0x2d, 0x8a, 0xfa, 0x96, 0x7b, 0xe6, 0x72, 0xce, 0x3d, 0xe7,
	0x5e, 0x02, 0xc3, 0x55, 0xb6, 0x5e, 0x63, 0xaa, 0xa7, 0xb9, 0xcc, 0x74, 0x46, 0x4e, 0x5d, 0xf9,
	0x49, 0xa1, 0xdc, 0xa0, 0x8c, 0x7f, 0x78, 0xd0, 0x9d, 0x97, 0x10, 0x39, 0x85, 0x96, 0xe0, 0xa1,
	0x17, 0x79, 0x93, 0x36, 0x6d, 0x09, 0x4e, 0xc6, 0xd0, 0xe3, 0x4c, 0xe3, 0x7b, 0xb1, 0xc6, 0xb0,
	0x15, 0x79, 0x93, 0x3e, 0xdd, 0xd5, 0x84, 0x40, 0x47, 0xe3, 0x57, 0x1d, 0xb6, 0x2d, 0x6e, 0xbf,
	0x49, 0x04, 0x03, 0x56, 0xe8, 0xdb, 0x4c, 0xbe, 0xc9, 0x6e, 0x44, 0x1a, 0x76, 0xec, 0xd3, 0x43,
	0x88, 0x3c, 0x85, 0x3e, 0x93, 0x5a, 0xac, 0x12, 0x5c, 0xf2, 0xd0, 0xb7, 0x42, 0x15, 0x60, 0xf4,
	0x72, 0x26, 0x31, 0xd5, 0x4b, 0x1e, 0x06, 0xf6, 0x71, 0x57, 0x9b, 0x37, 0xa1, 0x5e, 0x71, 0xa1,
	0x91, 0x87, 0xdd, 0xc8, 0x9b, 0xf4, 0xe8, 0xae, 0x26, 0xe7, 0xe0, 0x27, 0xe2, 0x0e, 0x55, 0xd8,
	0x8b, 0xbc, 0x89, 0x4f, 0xcb, 0x22, 0xfe, 0xe6, 0x41, 0x70, 0x65, 0xb5, 0x6d, 0x83, 0x1d, 0xc9,
	0xb3, 0x23, 0x95, 0x85, 0xa1, 0x4c, 0x98, 0xd2, 0x6f, 0x59, 0x65, 0x6f, 0x5b, 0x9b, 0x41, 0xbf,
	0x08, 0xe9, 0x1e, 0x4b, 0x8f, 0x15, 0x60, 0xf8, 0xd4, 0x2a, 0x93, 0x68, 0x2d, 0xfa, 0xb4, 0x2c,
	0xac, 0xb9, 0x0d, 0xd3, 0x4c, 0x5e, 0xcb, 0xc4, 0x9a, 0xeb, 0xd3, 0x0a, 0x88, 0x7f, 0x7a, 0x70,
	0xf6, 0x4e, 0xa2, 0x31, 0xc4, 0xff, 0x55, 0xe0, 0xb5, 0x38, 0x3b, 0xc7, 0xe2, 0xf4, 0x8f, 0xc4,
	0x19, 0xec, 0xc5, 0x39, 0x85, 0xa0, 0xdc, 0x99, 0x0d, 0x7a, 0x30, 0x1b, 0x4d, 0xeb, 0x37, 0x33,
	0x2d, 0x53, 0xa5, 0xae, 0xeb, 0x40, 0xfc, 0x39, 0x9c, 0x39, 0x9b, 0x14, 0x55, 0x9e, 0xa5, 0x0a,
	0xc9, 0x08, 0x02, 0xa5, 0x99, 0x2e, 0x94, 0xb5, 0x3c, 0xa4, 0xae, 0x22, 0x97, 0xd0, 0xe1, 0x4c,
	0x33, 0x6b, 0x79, 0x30, 0xbb, 0xd8, 0x97, 0xdb, 0x4b, 0x8d, 0xda, 0x66, 0xf2, 0x08, 0xda, 0x6b,
	0x75, 0xe3, 0xe2, 0x30, 0x9f, 0x71, 0x01, 0xe7, 0xae, 0x65, 0x7e, 0x5b, 0xa4, 0x77, 0x7f, 0x20,
	0xdb, 0xfe, 0x1b, 0x59, 0x04, 0x32, 0x97, 0xc8, 0x34, 0xba, 0xc6, 0x65, 0x9a, 0x17, 0x9a, 0xbc,
	0x80, 0xae, 0xe3, 0xb3, 0xaa, 0x83, 0xd9, 0xe3, 0x7d, 0xfe, 0x2d, 0xef, 0xb6, 0xcf, 0x6c, 0x53,
	0xa1, 0x52, 0x22, 0x4b, 0x97, 0x0b, 0xb7, 0xfe, 0x0a, 0x30, 0x32, 0xd7, 0x39, 0xff, 0xef, 0x32,
	0xcf, 0xa1, 0x7f, 0xe5, 0x2e, 0x68, 0xf1, 0xf0, 0xbe, 0x16, 0xee, 0x4c, 0x2b, 0x60, 0xf6, 0xbd,
	0xb5, 0x5b, 0xf1, 0x02, 0x13, 0xb1, 0x41, 0x79, 0x4f, 0x3e, 0xc0, 0xb0, 0x16, 0x06, 0x89, 0x1b,
	0xf3, 0x34, 0xb2, 0x1a, 0x5f, 0x1c, 0x9a, 0xd9, 0x6d, 0x30, 0x3e, 0x31, 0xbc, 0x35, 0xf7, 0x4d,
	0xde, 0x66, 0x38, 0xbf, 0xc3, 0xfb, 0x11, 0x46, 0xaf, 0x51, 0x3b, 0x5c, 0xbd, 0xbc, 0xaf, 0xbc,
	0x3f, 0x69, 0x5c, 0xfd, 0xf6, 0x69, 0xfc, 0xec, 0x00, 0x6f, 0xed, 0xec, 0xe2, 0x93, 0xcf, 0x81,
	0xfd, 0xe5, 0x5e, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x02, 0x73, 0x85, 0x41, 0x83, 0x05, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommentDeliveryClient is the client API for CommentDelivery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommentDeliveryClient interface {
	CreateComment(ctx context.Context, in *CreateCommentInput, opts ...grpc.CallOption) (*CommentResponse, error)
	UpdateComment(ctx context.Context, in *UpdateCommentInput, opts ...grpc.CallOption) (*CommentResponse, error)
	GetCommentsByArticleID(ctx context.Context, in *ArticleID, opts ...grpc.CallOption) (*CommentChunkResponse, error)
}

type commentDeliveryClient struct {
	cc *grpc.ClientConn
}

func NewCommentDeliveryClient(cc *grpc.ClientConn) CommentDeliveryClient {
	return &commentDeliveryClient{cc}
}

func (c *commentDeliveryClient) CreateComment(ctx context.Context, in *CreateCommentInput, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, "/comment_server.CommentDelivery/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentDeliveryClient) UpdateComment(ctx context.Context, in *UpdateCommentInput, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, "/comment_server.CommentDelivery/UpdateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentDeliveryClient) GetCommentsByArticleID(ctx context.Context, in *ArticleID, opts ...grpc.CallOption) (*CommentChunkResponse, error) {
	out := new(CommentChunkResponse)
	err := c.cc.Invoke(ctx, "/comment_server.CommentDelivery/GetCommentsByArticleID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentDeliveryServer is the server API for CommentDelivery service.
type CommentDeliveryServer interface {
	CreateComment(context.Context, *CreateCommentInput) (*CommentResponse, error)
	UpdateComment(context.Context, *UpdateCommentInput) (*CommentResponse, error)
	GetCommentsByArticleID(context.Context, *ArticleID) (*CommentChunkResponse, error)
}

// UnimplementedCommentDeliveryServer can be embedded to have forward compatible implementations.
type UnimplementedCommentDeliveryServer struct {
}

func (*UnimplementedCommentDeliveryServer) CreateComment(ctx context.Context, req *CreateCommentInput) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (*UnimplementedCommentDeliveryServer) UpdateComment(ctx context.Context, req *UpdateCommentInput) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (*UnimplementedCommentDeliveryServer) GetCommentsByArticleID(ctx context.Context, req *ArticleID) (*CommentChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsByArticleID not implemented")
}

func RegisterCommentDeliveryServer(s *grpc.Server, srv CommentDeliveryServer) {
	s.RegisterService(&_CommentDelivery_serviceDesc, srv)
}

func _CommentDelivery_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentDeliveryServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment_server.CommentDelivery/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentDeliveryServer).CreateComment(ctx, req.(*CreateCommentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentDelivery_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentDeliveryServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment_server.CommentDelivery/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentDeliveryServer).UpdateComment(ctx, req.(*UpdateCommentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentDelivery_GetCommentsByArticleID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentDeliveryServer).GetCommentsByArticleID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment_server.CommentDelivery/GetCommentsByArticleID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentDeliveryServer).GetCommentsByArticleID(ctx, req.(*ArticleID))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommentDelivery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comment_server.CommentDelivery",
	HandlerType: (*CommentDeliveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComment",
			Handler:    _CommentDelivery_CreateComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _CommentDelivery_UpdateComment_Handler,
		},
		{
			MethodName: "GetCommentsByArticleID",
			Handler:    _CommentDelivery_GetCommentsByArticleID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment.proto",
}
