// Code generated by MockGen. DO NOT EDIT.
// Source: comment.pb.go

// Package mock_comment_server is a generated GoMock package.
package mock_comment_server

import (
	context "context"
	reflect "reflect"

	comment_server "github.com/go-park-mail-ru/2021_2_SaberDevs/internal/comment/comment_app"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCommentDeliveryClient is a mock of CommentDeliveryClient interface.
type MockCommentDeliveryClient struct {
	ctrl     *gomock.Controller
	recorder *MockCommentDeliveryClientMockRecorder
}

// MockCommentDeliveryClientMockRecorder is the mock recorder for MockCommentDeliveryClient.
type MockCommentDeliveryClientMockRecorder struct {
	mock *MockCommentDeliveryClient
}

// NewMockCommentDeliveryClient creates a new mock instance.
func NewMockCommentDeliveryClient(ctrl *gomock.Controller) *MockCommentDeliveryClient {
	mock := &MockCommentDeliveryClient{ctrl: ctrl}
	mock.recorder = &MockCommentDeliveryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentDeliveryClient) EXPECT() *MockCommentDeliveryClientMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentDeliveryClient) CreateComment(ctx context.Context, in *comment_server.CreateCommentInput, opts ...grpc.CallOption) (*comment_server.CommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateComment", varargs...)
	ret0, _ := ret[0].(*comment_server.CommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentDeliveryClientMockRecorder) CreateComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentDeliveryClient)(nil).CreateComment), varargs...)
}

// GetCommentsByArticleID mocks base method.
func (m *MockCommentDeliveryClient) GetCommentsByArticleID(ctx context.Context, in *comment_server.ArticleID, opts ...grpc.CallOption) (*comment_server.CommentChunkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommentsByArticleID", varargs...)
	ret0, _ := ret[0].(*comment_server.CommentChunkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByArticleID indicates an expected call of GetCommentsByArticleID.
func (mr *MockCommentDeliveryClientMockRecorder) GetCommentsByArticleID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByArticleID", reflect.TypeOf((*MockCommentDeliveryClient)(nil).GetCommentsByArticleID), varargs...)
}

// UpdateComment mocks base method.
func (m *MockCommentDeliveryClient) UpdateComment(ctx context.Context, in *comment_server.UpdateCommentInput, opts ...grpc.CallOption) (*comment_server.CommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateComment", varargs...)
	ret0, _ := ret[0].(*comment_server.CommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentDeliveryClientMockRecorder) UpdateComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentDeliveryClient)(nil).UpdateComment), varargs...)
}

// MockCommentDeliveryServer is a mock of CommentDeliveryServer interface.
type MockCommentDeliveryServer struct {
	ctrl     *gomock.Controller
	recorder *MockCommentDeliveryServerMockRecorder
}

// MockCommentDeliveryServerMockRecorder is the mock recorder for MockCommentDeliveryServer.
type MockCommentDeliveryServerMockRecorder struct {
	mock *MockCommentDeliveryServer
}

// NewMockCommentDeliveryServer creates a new mock instance.
func NewMockCommentDeliveryServer(ctrl *gomock.Controller) *MockCommentDeliveryServer {
	mock := &MockCommentDeliveryServer{ctrl: ctrl}
	mock.recorder = &MockCommentDeliveryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentDeliveryServer) EXPECT() *MockCommentDeliveryServerMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentDeliveryServer) CreateComment(arg0 context.Context, arg1 *comment_server.CreateCommentInput) (*comment_server.CommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1)
	ret0, _ := ret[0].(*comment_server.CommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentDeliveryServerMockRecorder) CreateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentDeliveryServer)(nil).CreateComment), arg0, arg1)
}

// GetCommentsByArticleID mocks base method.
func (m *MockCommentDeliveryServer) GetCommentsByArticleID(arg0 context.Context, arg1 *comment_server.ArticleID) (*comment_server.CommentChunkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByArticleID", arg0, arg1)
	ret0, _ := ret[0].(*comment_server.CommentChunkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByArticleID indicates an expected call of GetCommentsByArticleID.
func (mr *MockCommentDeliveryServerMockRecorder) GetCommentsByArticleID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByArticleID", reflect.TypeOf((*MockCommentDeliveryServer)(nil).GetCommentsByArticleID), arg0, arg1)
}

// UpdateComment mocks base method.
func (m *MockCommentDeliveryServer) UpdateComment(arg0 context.Context, arg1 *comment_server.UpdateCommentInput) (*comment_server.CommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", arg0, arg1)
	ret0, _ := ret[0].(*comment_server.CommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentDeliveryServerMockRecorder) UpdateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentDeliveryServer)(nil).UpdateComment), arg0, arg1)
}
