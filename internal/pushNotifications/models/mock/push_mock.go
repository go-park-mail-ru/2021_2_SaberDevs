// Code generated by MockGen. DO NOT EDIT.
// Source: pushNotification.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	webpush "github.com/SherClockHolmes/webpush-go"
	gomock "github.com/golang/mock/gomock"
)

// MockPushNotificationUsecase is a mock of PushNotificationUsecase interface.
type MockPushNotificationUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPushNotificationUsecaseMockRecorder
}

// MockPushNotificationUsecaseMockRecorder is the mock recorder for MockPushNotificationUsecase.
type MockPushNotificationUsecaseMockRecorder struct {
	mock *MockPushNotificationUsecase
}

// NewMockPushNotificationUsecase creates a new mock instance.
func NewMockPushNotificationUsecase(ctrl *gomock.Controller) *MockPushNotificationUsecase {
	mock := &MockPushNotificationUsecase{ctrl: ctrl}
	mock.recorder = &MockPushNotificationUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPushNotificationUsecase) EXPECT() *MockPushNotificationUsecaseMockRecorder {
	return m.recorder
}

// CreateSubscription mocks base method.
func (m *MockPushNotificationUsecase) CreateSubscription(ctx context.Context, subscription webpush.Subscription, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, subscription, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockPushNotificationUsecaseMockRecorder) CreateSubscription(ctx, subscription, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockPushNotificationUsecase)(nil).CreateSubscription), ctx, subscription, sessionID)
}

// DeleteSubscription mocks base method.
func (m *MockPushNotificationUsecase) DeleteSubscription(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockPushNotificationUsecaseMockRecorder) DeleteSubscription(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockPushNotificationUsecase)(nil).DeleteSubscription), ctx)
}

// UpdateSubscription mocks base method.
func (m *MockPushNotificationUsecase) UpdateSubscription(ctx context.Context, subscription webpush.Subscription, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", ctx, subscription, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockPushNotificationUsecaseMockRecorder) UpdateSubscription(ctx, subscription, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockPushNotificationUsecase)(nil).UpdateSubscription), ctx, subscription, sessionID)
}

// MockPushNotificationRepository is a mock of PushNotificationRepository interface.
type MockPushNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPushNotificationRepositoryMockRecorder
}

// MockPushNotificationRepositoryMockRecorder is the mock recorder for MockPushNotificationRepository.
type MockPushNotificationRepositoryMockRecorder struct {
	mock *MockPushNotificationRepository
}

// NewMockPushNotificationRepository creates a new mock instance.
func NewMockPushNotificationRepository(ctrl *gomock.Controller) *MockPushNotificationRepository {
	mock := &MockPushNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockPushNotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPushNotificationRepository) EXPECT() *MockPushNotificationRepositoryMockRecorder {
	return m.recorder
}

// DeleteSubscription mocks base method.
func (m *MockPushNotificationRepository) DeleteSubscription(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockPushNotificationRepositoryMockRecorder) DeleteSubscription(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockPushNotificationRepository)(nil).DeleteSubscription), ctx)
}

// DequeueArticleComment mocks base method.
func (m *MockPushNotificationRepository) DequeueArticleComment() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DequeueArticleComment")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DequeueArticleComment indicates an expected call of DequeueArticleComment.
func (mr *MockPushNotificationRepositoryMockRecorder) DequeueArticleComment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DequeueArticleComment", reflect.TypeOf((*MockPushNotificationRepository)(nil).DequeueArticleComment))
}

// DequeueArticleLike mocks base method.
func (m *MockPushNotificationRepository) DequeueArticleLike() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DequeueArticleLike")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DequeueArticleLike indicates an expected call of DequeueArticleLike.
func (mr *MockPushNotificationRepositoryMockRecorder) DequeueArticleLike() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DequeueArticleLike", reflect.TypeOf((*MockPushNotificationRepository)(nil).DequeueArticleLike))
}

// GetSubscription mocks base method.
func (m *MockPushNotificationRepository) GetSubscription(ctx context.Context, login string) (webpush.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", ctx, login)
	ret0, _ := ret[0].(webpush.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockPushNotificationRepositoryMockRecorder) GetSubscription(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockPushNotificationRepository)(nil).GetSubscription), ctx, login)
}

// QueueArticleComment mocks base method.
func (m *MockPushNotificationRepository) QueueArticleComment(comment []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueArticleComment", comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueArticleComment indicates an expected call of QueueArticleComment.
func (mr *MockPushNotificationRepositoryMockRecorder) QueueArticleComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueArticleComment", reflect.TypeOf((*MockPushNotificationRepository)(nil).QueueArticleComment), comment)
}

// QueueArticleLike mocks base method.
func (m *MockPushNotificationRepository) QueueArticleLike(like []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueArticleLike", like)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueArticleLike indicates an expected call of QueueArticleLike.
func (mr *MockPushNotificationRepositoryMockRecorder) QueueArticleLike(like interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueArticleLike", reflect.TypeOf((*MockPushNotificationRepository)(nil).QueueArticleLike), like)
}

// StoreSubscription mocks base method.
func (m *MockPushNotificationRepository) StoreSubscription(ctx context.Context, subscription webpush.Subscription, login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSubscription", ctx, subscription, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSubscription indicates an expected call of StoreSubscription.
func (mr *MockPushNotificationRepositoryMockRecorder) StoreSubscription(ctx, subscription, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSubscription", reflect.TypeOf((*MockPushNotificationRepository)(nil).StoreSubscription), ctx, subscription, login)
}

// UpdateSubscription mocks base method.
func (m *MockPushNotificationRepository) UpdateSubscription(ctx context.Context, subscription webpush.Subscription, login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", ctx, subscription, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockPushNotificationRepositoryMockRecorder) UpdateSubscription(ctx, subscription, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockPushNotificationRepository)(nil).UpdateSubscription), ctx, subscription, login)
}
